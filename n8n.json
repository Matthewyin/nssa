{
  "nodes": [
    {
      "parameters": {
        "jsCode": "// 处理所有文档数据，合并文件夹信息\nconst allResults = $input.all();\nlet allDocuments = [];\n\n// 文件夹映射\nconst folderMap = {\n  '1xDNGIOGnsCsXs0KZCHwKOav96dQGith4': { name: '心理专题', category: 'psychology' },\n  '1uKz9AOYftgvExoLPbiMvlEtdjY63YSB6': { name: '职场专题', category: 'workplace' },\n  '125UBg7dLONmNg0ou9T4d8uVW_fsrJFH8': { name: '历史专题', category: 'history' },\n  '1frvBLCJkyDaBffF_JXR4Px8DoIcL-75_': { name: '技术专题', category: 'tech' },\n  '1hVM2Q2doBl2Sb9HeUvTawjxIhP_MGd6P': { name: '业务专题', category: 'business'}\n};\n\n// 遍历每个文件夹的结果\nallResults.forEach(result => {\n  if (result.json.files && result.json.files.length > 0) {\n    result.json.files.forEach(file => {\n      const folderId = file.parents[0];\n      const folderInfo = folderMap[folderId];\n      \n      if (folderInfo) {\n        allDocuments.push({\n          json: {\n            ...file,\n            folderName: folderInfo.name,\n            folderId: folderId,\n            category: folderInfo.category\n          }\n        });\n      }\n    });\n  }\n});\n\nconsole.log(`总共找到 ${allDocuments.length} 个文档`);\nreturn allDocuments;"
      },
      "id": "f4f44f4a-52f1-4e22-9866-fcab4085f511",
      "name": "处理文档数据",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "// 解析AI Agent的响应\nconst response = $input.first();\nconst aiResponse = response.json.output;\nconst originalDoc = $('Loop Over Items').first().json;\n\nlet frontMatter = aiResponse;\n\n// 直接使用文档ID的后8位作为文件名\nconst docId = originalDoc.id;\nconst shortId = docId.slice(-8);\nconst fileName = $('判断文件状态').first().json.category + `-${shortId}.md`;\n\n// 构建完整的Front Matter\nconst now = new Date();\nconst completeFrontMatter = {\n  ...frontMatter,\n  date: now.toISOString(),\n  lastmod: now.toISOString(),\n  categories: [originalDoc.folderName]\n};\n\nreturn {\n  json: {\n    originalDoc,\n    frontMatter: completeFrontMatter,\n    fileName,\n    category: originalDoc.category\n  }\n};"
      },
      "id": "444f1c3f-432e-4ec3-9bcf-fee3af4022bd",
      "name": "处理AI响应",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        416
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1456,
        192
      ],
      "id": "2364d11a-e536-48ca-8e1a-1f283b65953b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=请分析这个Google文档并返回Hugo格式的Front Matter。\n\n文档信息：\n- URL: {{$json.webViewLink}}\n- 标题: {{$json.name}}\n- 分类: {{$json.folderName}}\n\n分析要求：\n1. 仔细阅读文档内容\n2. 提取核心主题和关键信息\n3. 生成适合的标签和描述\n\n返回JSON格式：\n{\n  \"title\": \"优化后的文章标题\",\n  \"subtitle\": \"简洁的副标题\",\n  \"description\": \"100-200字的文章描述，突出核心价值\",\n  \"tags\": [\"相关标签1\", \"相关标签2\", \"相关标签3\"],\n  \"readingTime\": \"约XX分钟\"\n}\n\n注意：只返回JSON，不要包含其他解释文字。",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -528,
        416
      ],
      "id": "6c778d04-e568-4139-99c1-cdd1b1886195",
      "name": "AI Agent",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"优化后的文章标题\",\n  \"subtitle\": \"简洁的副标题\",\n  \"description\": \"100-200字的文章描述，突出核心价值\",\n  \"tags\": [\"相关标签1\", \"相关标签2\", \"相关标签3\"],\n  \"readingTime\": \"约XX分钟\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -240,
        720
      ],
      "id": "08db73e1-1b6f-4f1e-af47-1ad1a8e3dbf3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -496,
        720
      ],
      "id": "70c78851-e18d-4886-b946-40d69fc4dc4e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "itRdUUPXbeECwMa9",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files/{{$json.id}}/export?mimeType=text/markdown",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "options": {}
      },
      "id": "57b166ba-2590-4c29-aacf-024b4fdfe2b1",
      "name": "下载Markdown内容",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -496,
        208
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "JUnWEOwe7cbBmf5L",
          "name": "Google Drive account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "770bc8fc-4352-44e9-9b2c-6e086d21aa8a",
      "name": "合并AI和内容",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        80,
        256
      ],
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// 合并内容 (SSH专用binary格式)\nconsole.log(\"--- [合并内容] 节点开始执行 ---\");\ntry {\n    // 1. 获取由Merge节点合并后的单个输入项\n    const input = $input.first();\n    const data = input.json;\n    console.log(\"收到的输入数据类型:\", typeof data);\n    console.log(\"收到的binary数据:\", input.binary ? \"存在\" : \"不存在\");\n\n    // 2. 严格检查合并后的数据是否有效\n    if (!data || !data.frontMatter || !data.fileName) {\n        console.error(\"错误：合并后的数据无效或不完整，将跳过此项。\");\n        return []; \n    }\n    console.log(`数据检查通过: ${data.fileName}`);\n\n    // 3. 准备Front Matter\n    const fm = data.frontMatter;\n    const frontMatterYaml = `title: \"${fm.title || ''}\"\nsubtitle: \"${fm.subtitle || ''}\"\ndescription: \"${fm.description || ''}\"\ntags: [${fm.tags ? fm.tags.map(tag => `\"${tag}\"`).join(', ') : ''}]\nreadingTime: \"${fm.readingTime || ''}\"\ndate: \"${fm.date || ''}\"\nlastmod: \"${fm.lastmod || ''}\"\ncategories: [${fm.categories ? fm.categories.map(cat => `\"${cat}\"`).join(', ') : ''}]`;\n\n    // 4. 获取Markdown内容\n    let content = '';\n    \n    if (input.binary && input.binary.data) {\n        if (Buffer.isBuffer(input.binary.data)) {\n            content = input.binary.data.toString('utf8');\n        } else {\n            content = Buffer.from(input.binary.data).toString('utf8');\n        }\n        console.log(\"从binary数据获取内容，长度:\", content.length);\n    } else if (typeof data.data === 'string') {\n        content = data.data;\n        console.log(\"从data.data获取内容，长度:\", content.length);\n    } else if (typeof data.body === 'string') {\n        content = data.body;\n        console.log(\"从data.body获取内容，长度:\", content.length);\n    } else {\n        console.error(`错误：无法找到文档内容，文档标题: ${data.frontMatter.title}`);\n        return [];\n    }\n\n    // 5. 验证内容不为空\n    if (!content || content.trim().length === 0) {\n        console.error(`错误：文档内容为空，跳过处理: ${data.frontMatter.title}`);\n        return [];\n    }\n\n    // 6. 合并完整文档\n    const completeDocument = `---\n${frontMatterYaml}\n---\n${content}`;\n    console.log(`完整文档长度: ${completeDocument.length}`);\n\n    // 7. 准备文件路径和文件名\n    const filePath = `/Users/matthewyin/Coding/nssa/content/${data.category}/`;\n    const fileName = data.fileName;\n    \n    // 8. 为SSH节点创建正确的binary格式\n    const fileContent = completeDocument;\n    \n    // 9. SSH节点专用格式 - 直接将文件内容作为字符串传递\n    const finalOutput = {\n        json: {\n            filePath,\n            fileName,\n            category: data.category,\n            title: data.frontMatter.title,\n            originalDoc: data.originalDoc,\n            success: true,\n            fileContent: fileContent  // 添加文件内容到json中\n        },\n        binary: {\n            data: Buffer.from(fileContent, 'utf8')\n        }\n    };\n    \n    console.log(`--- [合并内容] 节点成功处理: ${fileName} ---`);\n    console.log(`输出文件内容长度: ${fileContent.length}`);\n    console.log(`输出binary.data长度: ${finalOutput.binary.data.length}`);\n    return finalOutput;\n    \n} catch (error) {\n    console.error(\"--- [合并内容] 节点发生错误 ---\", error.message);\n    console.error(\"错误堆栈:\", error.stack);\n    return [];\n}"
      },
      "id": "21f04294-008f-4274-8780-f034ef2b9714",
      "name": "合并内容",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        256
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "authentication": "privateKey",
        "command": "=CATEGORY=\"{{ $json.category }}\"\nFILENAME=\"{{ $json.fileName }}\"\nSLUG=\"${FILENAME%.md}\"\nBASE_PATH=\"/Users/matthewyin/Coding/nssa/src/content/posts\"\nFULL_PATH=\"${BASE_PATH}/${CATEGORY}/${SLUG}\"\n\nmkdir -p \"${FULL_PATH}/\" && cat > \"${FULL_PATH}/index.md\" << 'EOFMARKER'\n{{ $json.fileContent }}\nEOFMARKER",
        "cwd": "=/"
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        480,
        752
      ],
      "id": "dbf8669b-06b1-4329-b96c-84e54b1cb018",
      "name": "保存合并后的文件到本地",
      "alwaysOutputData": false,
      "retryOnFail": false,
      "credentials": {
        "sshPrivateKey": {
          "id": "N6eECZU7wEyeaTWT",
          "name": "SSH Password account 2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "be2bdc3d-dd1c-47f1-817f-feaa003c9323",
              "leftValue": "={{ $json.skipProcessing }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -784,
        192
      ],
      "id": "78ba29f7-d0aa-4eaf-aa6f-d1e4b50634a7",
      "name": "If"
    },
    {
      "parameters": {
        "authentication": "privateKey",
        "command": "=# 重新构建文件名（与原逻辑保持一致）\nCATEGORY=\"{{ $json.category }}\"\nID_SUFFIX=\"{{ $json.id.slice(-8) }}\"\nFILENAME=\"${CATEGORY}-${ID_SUFFIX}\"\nTARGET_DIR=\"/Users/matthewyin/Coding/nssa/src/content/posts/${CATEGORY}/${FILENAME}\"\n\n# 调试输出\necho \"CATEGORY: ${CATEGORY}\"\necho \"ID_SUFFIX: ${ID_SUFFIX}\"\necho \"FILENAME: ${FILENAME}\"\necho \"TARGET_DIR: ${TARGET_DIR}\"\necho \"Directory listing:\"\nls -la \"/Users/matthewyin/Coding/nssa/src/content/posts/${CATEGORY}/\" 2>/dev/null || echo \"Category directory not found\"\n\n# 检查目录是否存在\nif test -d \"${TARGET_DIR}\"; then\n    echo \"RESULT: EXISTS\"\nelse\n    echo \"RESULT: NOT_EXISTS\"\nfi",
        "cwd": "=/"
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -1232,
        192
      ],
      "id": "0cd5378f-da7a-446a-aa8b-d34fd9db85c9",
      "name": "检查文件是否存在",
      "credentials": {
        "sshPrivateKey": {
          "id": "N6eECZU7wEyeaTWT",
          "name": "SSH Password account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 检查文件是否存在\nconst checkResult = $input.first();\nconst originalDoc = $('Loop Over Items').first().json;\n\n// 获取SSH命令的输出\nconst output = checkResult.json.stdout.trim();\n\n// 查找RESULT行\nconst lines = output.split('\\n');\nconst resultLine = lines.find(line => line.startsWith('RESULT:'));\nconst result = resultLine ? resultLine.split(':')[1].trim() : 'NOT_EXISTS';\n\nif (result === 'EXISTS') {\n  // 文件已存在，跳过处理\n  return {\n    json: {\n      ...originalDoc, \n      fileExists: true,\n      skipProcessing: true,\n      message: `文件已存在，跳过处理: ${originalDoc.name}` // ✅ 正确消息\n    }\n  };\n}\nelse {\n  // 文件不存在，需要处理\n  return {\n    json: {\n      ...originalDoc,\n      fileExists: false,\n      skipProcessing: false,\n      message: `文件不存在，开始处理: ${originalDoc.name}` // ✅ 正确消息\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        192
      ],
      "id": "8099dcec-37a8-4d35-8202-f470b66011f8",
      "name": "判断文件状态"
    },
    {
      "parameters": {
        "authentication": "privateKey",
        "command": "cd /Users/matthewyin/Coding/nssa && pwd && echo \"=== Git Status ===\" && git status && echo \"=== Git Remote ===\" && git remote -v && echo \"=== Git Config ===\" && git config --list | grep -E \"(user|remote)\" && echo \"=== Checking for changes ===\" && git diff-index --quiet HEAD -- && echo \"No changes\" || echo \"Changes detected\" && echo \"=== Adding files ===\" && git add . && echo \"=== Git Status After Add ===\" && git status && echo \"=== Attempting commit ===\" && git diff-index --quiet HEAD -- || (echo \"Committing changes...\" && git commit -m \"自动发布：批量更新文档\" && echo \"Pushing to remote...\" && git push)",
        "cwd": "=Coding/nssa"
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -1232,
        16
      ],
      "id": "c5806e00-fca4-4c98-ac4f-4369e7cc3e46",
      "name": "更新至GitHub",
      "executeOnce": true,
      "credentials": {
        "sshPrivateKey": {
          "id": "N6eECZU7wEyeaTWT",
          "name": "SSH Password account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "'1BuWi03gZ8GwndFjz2LdhQglGMjW80VMY' in parents and mimeType='application/vnd.google-apps.folder'"
            },
            {
              "name": "fields",
              "value": "files(id,name)"
            }
          ]
        },
        "options": {}
      },
      "id": "b436d79b-adea-4b06-81e3-a11aef1edf96",
      "name": "获取Google Dri nssa的子目录",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -2336,
        192
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "JUnWEOwe7cbBmf5L",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 处理子文件夹数据，为每个文件夹创建查询\nconst response = $input.first().json;\n\nif (!response.files || response.files.length === 0) {\n  console.log('没有找到子文件夹');\n  return [];\n}\n\nconsole.log(`找到 ${response.files.length} 个子文件夹`);\n\n// 为每个文件夹创建独立的查询任务\nreturn response.files.map(folder => ({\n  json: {\n    folderId: folder.id,\n    folderName: folder.name,\n    queryUrl: `https://www.googleapis.com/drive/v3/files?q='${folder.id}' in parents and mimeType='application/vnd.google-apps.document'&fields=files(id,name,mimeType,modifiedTime,parents,webViewLink)`\n  }\n}));"
      },
      "id": "329e1c59-e66c-49b2-8ba5-5495f8903744",
      "name": "处理nssa目录",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2112,
        192
      ]
    },
    {
      "parameters": {
        "url": "={{$json.queryUrl}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "options": {}
      },
      "id": "44e72fe5-76b0-4d24-b0e5-6f4d89de11c8",
      "name": "扫描nssa目录文档",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1888,
        192
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "JUnWEOwe7cbBmf5L",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 12
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2560,
        192
      ],
      "id": "c6202946-9b20-4b45-a0c6-ac265be4ca99",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "model": "deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -656,
        720
      ],
      "id": "ae2b3acb-4fb6-4df5-88e1-df69b9a2f59f",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "pHU2v7B9FrlTiNWG",
          "name": "DeepSeek account"
        }
      }
    }
  ],
  "connections": {
    "处理文档数据": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理AI响应": {
      "main": [
        [
          {
            "node": "合并AI和内容",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "更新至GitHub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "检查文件是否存在",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "处理AI响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "下载Markdown内容": {
      "main": [
        [
          {
            "node": "合并AI和内容",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "合并AI和内容": {
      "main": [
        [
          {
            "node": "合并内容",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "合并内容": {
      "main": [
        [
          {
            "node": "保存合并后的文件到本地",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "保存合并后的文件到本地": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "下载Markdown内容",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查文件是否存在": {
      "main": [
        [
          {
            "node": "判断文件状态",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断文件状态": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取Google Dri nssa的子目录": {
      "main": [
        [
          {
            "node": "处理nssa目录",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理nssa目录": {
      "main": [
        [
          {
            "node": "扫描nssa目录文档",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "扫描nssa目录文档": {
      "main": [
        [
          {
            "node": "处理文档数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "获取Google Dri nssa的子目录",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Schedule Trigger": [
      {
        "timestamp": "2025-08-26T10:30:34.509+08:00",
        "Readable date": "August 26th 2025, 10:30:34 am",
        "Readable time": "10:30:34 am",
        "Day of week": "Tuesday",
        "Year": "2025",
        "Month": "August",
        "Day of month": "26",
        "Hour": "10",
        "Minute": "30",
        "Second": "34",
        "Timezone": "Asia/Shanghai (UTC+08:00)"
      }
    ]
  },
  "meta": {
    "instanceId": "ea27eea5943ea997fc6bfde06792d1e57f992a703d9ffee127ac850cbaaf6839"
  }
}