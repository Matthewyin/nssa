---
import { getCollection } from 'astro:content';
import { getLangFromUrl } from '../utils/i18n';

// 获取当前语言
const currentLang = getLangFromUrl(Astro.url);

// 获取所有文章用于搜索（包含所有语言）
const allPosts = await getCollection('posts', ({ data }) => {
  return !data.draft;
});

// 准备搜索数据
const searchData = allPosts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  description: post.data.description || '',
  tags: post.data.tags || [],
  categories: post.data.categories || [],
  content: post.body.slice(0, 500), // 只取前500字符用于搜索
  date: post.data.date.toISOString(),
  lang: post.data.lang || 'zh',
  author: post.data.author || 'NSSA Team'
}));

// 分离不同语言的数据
const zhPosts = searchData.filter(post => post.lang === 'zh');
const enPosts = searchData.filter(post => post.lang === 'en');
---

<!-- Search Results Container -->
<div id="search-results" class="hidden absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto">
  <div id="search-results-content" class="p-2">
    <!-- 搜索结果将在这里显示 -->
  </div>
</div>

<!-- Mobile Search Results Container -->
<div id="mobile-search-results" class="hidden absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto md:hidden">
  <div id="mobile-search-results-content" class="p-2">
    <!-- 移动端搜索结果将在这里显示 -->
  </div>
</div>

<script define:vars={{ searchData, zhPosts, enPosts, currentLang }}>
  // 全局搜索函数
  let globalPerformSearch;

  // 初始化搜索功能
  document.addEventListener('DOMContentLoaded', async function() {

    // 通用函数定义（无论Fuse.js是否加载都需要）

    // 隐藏搜索结果
    function hideSearchResults() {
      const searchResults = document.getElementById('search-results');
      const mobileSearchResults = document.getElementById('mobile-search-results');
      if (searchResults) searchResults.classList.add('hidden');
      if (mobileSearchResults) mobileSearchResults.classList.add('hidden');
    }

    // 获取内容片段
    function getContentSnippet(content, matchIndex) {
      const start = Math.max(0, matchIndex - 50);
      const end = Math.min(content.length, matchIndex + 100);
      return content.slice(start, end);
    }

    // 显示所有结果（跳转到搜索页面）
    window.showAllResults = function(query) {
      window.location.href = `/search/?q=${encodeURIComponent(query)}`;
    }

    // 高亮匹配文本
    function highlightText(text, indices) {
      if (!indices || indices.length === 0) return text;

      let result = '';
      let lastIndex = 0;

      indices.forEach(([start, end]) => {
        result += text.slice(lastIndex, start);
        result += `<mark class="bg-yellow-200 dark:bg-yellow-600 px-1 rounded">${text.slice(start, end + 1)}</mark>`;
        lastIndex = end + 1;
      });

      result += text.slice(lastIndex);
      return result;
    }

    try {
      // 尝试加载 Fuse.js
      const { default: Fuse } = await import('fuse.js');
      
      // 配置 Fuse.js 搜索选项
      const fuseOptions = {
        keys: [
          { name: 'title', weight: 0.4 },
          { name: 'description', weight: 0.3 },
          { name: 'tags', weight: 0.15 },
          { name: 'content', weight: 0.1 },
          { name: 'author', weight: 0.05 }
        ],
        threshold: 0.4,
        includeScore: true,
        includeMatches: true,
        minMatchCharLength: 1
      };

      // 创建多语言搜索实例
      const zhFuse = new Fuse(zhPosts, fuseOptions);
      const enFuse = new Fuse(enPosts, fuseOptions);
      const allFuse = new Fuse(searchData, fuseOptions);
      
      // Fuse.js 智能搜索功能
      function fusePerformSearch(query, isMobile = false) {
        if (!query || query.length < 1) {
          hideSearchResults();
          return;
        }

        // 根据当前页面语言和查询内容智能选择搜索范围
        let results = [];

        // 首先在当前语言中搜索
        const currentLangFuse = currentLang === 'zh' ? zhFuse : enFuse;
        const currentLangResults = currentLangFuse.search(query);

        // 如果当前语言结果少于3个，则在全站搜索
        if (currentLangResults.length < 3) {
          const allResults = allFuse.search(query);
          // 合并结果，当前语言优先
          const otherLangResults = allResults.filter(result =>
            result.item.lang !== currentLang &&
            !currentLangResults.some(curr => curr.item.slug === result.item.slug)
          );
          results = [...currentLangResults, ...otherLangResults].slice(0, 8);
        } else {
          results = currentLangResults.slice(0, 6);
        }

        displaySearchResults(results, query, isMobile);
      }

      // 设置全局搜索函数
      globalPerformSearch = fusePerformSearch;
      
      // 显示搜索结果
      function displaySearchResults(results, query, isMobile = false) {
        const searchResults = isMobile ?
          document.getElementById('mobile-search-results') :
          document.getElementById('search-results');
        const searchResultsContent = isMobile ?
          document.getElementById('mobile-search-results-content') :
          document.getElementById('search-results-content');

        if (results.length === 0) {
          searchResultsContent.innerHTML = `
            <div class="text-center py-6">
              <div class="text-gray-400 dark:text-gray-500 mb-2">
                <svg class="w-12 h-12 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5A7 7 0 113 10a7 7 0 0114 0z"/>
                </svg>
              </div>
              <p class="text-gray-500 dark:text-gray-400 font-medium">没有找到匹配的结果</p>
              <p class="text-gray-400 dark:text-gray-500 text-sm mt-1">尝试使用不同的关键词</p>
            </div>
          `;
        } else {
          const resultsHTML = results.slice(0, 6).map((result, index) => {
            const post = result.item;
            const score = Math.round((1 - result.score) * 100);

            // 高亮匹配的文本
            let highlightedTitle = post.title;
            let highlightedDescription = post.description;
            let highlightedContent = '';

            if (result.matches) {
              result.matches.forEach(match => {
                if (match.key === 'title') {
                  highlightedTitle = highlightText(post.title, match.indices);
                } else if (match.key === 'description') {
                  highlightedDescription = highlightText(post.description, match.indices);
                } else if (match.key === 'content') {
                  // 显示匹配内容的片段
                  const contentMatch = getContentSnippet(post.content, match.indices[0]);
                  highlightedContent = highlightText(contentMatch, [[0, query.length - 1]]);
                }
              });
            }

            // 分类标签的多语言映射
            const categoryNames = {
              zh: {
                'business': '业务',
                'tech': '技术',
                'psychology': '心理',
                'workplace': '职场',
                'history': '历史'
              },
              en: {
                'business': 'Business',
                'tech': 'Technology',
                'psychology': 'Psychology',
                'workplace': 'Workplace',
                'history': 'History'
              }
            };

            // 语言标识
            const langLabels = {
              zh: '中文',
              en: 'English'
            };

            // 构建文章链接
            const postUrl = post.lang === 'en' ? `/en/posts/${post.slug}/` : `/posts/${post.slug}/`;

            return `
              <a href="${postUrl}" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-all duration-200 group">
                <div class="flex items-start gap-3">
                  <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-sm font-semibold">
                    ${index + 1}
                  </div>
                  <div class="flex-1 min-w-0">
                    <div class="flex items-center gap-2 mb-1">
                      <h3 class="font-medium text-gray-900 dark:text-white line-clamp-1 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors flex-1">
                        ${highlightedTitle}
                      </h3>
                      ${post.lang !== currentLang ? `
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-100 dark:bg-amber-900 text-amber-800 dark:text-amber-200">
                          ${langLabels[post.lang]}
                        </span>
                      ` : ''}
                    </div>
                    ${highlightedDescription ? `
                      <p class="text-sm text-gray-600 dark:text-gray-300 mb-2 line-clamp-2">
                        ${highlightedDescription}
                      </p>
                    ` : ''}
                    ${highlightedContent ? `
                      <p class="text-xs text-gray-500 dark:text-gray-400 mb-2 line-clamp-1 italic">
                        ...${highlightedContent}...
                      </p>
                    ` : ''}
                    <div class="flex items-center justify-between">
                      <div class="flex items-center gap-2">
                        ${post.categories.map(cat => `
                          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                            ${categoryNames[post.lang] ? categoryNames[post.lang][cat] || cat : cat}
                          </span>
                        `).join('')}
                      </div>
                      <div class="flex items-center gap-1 text-xs text-gray-400 dark:text-gray-500">
                        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd"/>
                        </svg>
                        <span>${score}%</span>
                      </div>
                    </div>
                  </div>
                </div>
              </a>
            `;
          }).join('');

          searchResultsContent.innerHTML = `
            <div class="px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 border-b border-gray-100 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50">
              <div class="flex items-center justify-between">
                <span>找到 ${results.length} 个结果</span>
                <span class="text-xs text-gray-500 dark:text-gray-400">按相关度排序</span>
              </div>
            </div>
            <div class="max-h-80 overflow-y-auto">
              ${resultsHTML}
            </div>
            ${results.length > 6 ? `
              <div class="px-3 py-2 text-center border-t border-gray-100 dark:border-gray-600">
                <button onclick="showAllResults('${query}')" class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium">
                  查看全部 ${results.length} 个结果 →
                </button>
              </div>
            ` : ''}
          `;
        }

        searchResults.classList.remove('hidden');
      }
      
      // 隐藏搜索结果
      function hideSearchResults() {
        const searchResults = document.getElementById('search-results');
        const mobileSearchResults = document.getElementById('mobile-search-results');
        searchResults.classList.add('hidden');
        mobileSearchResults.classList.add('hidden');
      }

      // 获取内容片段
      function getContentSnippet(content, matchIndex) {
        const start = Math.max(0, matchIndex - 50);
        const end = Math.min(content.length, matchIndex + 100);
        return content.slice(start, end);
      }

      // 显示所有结果（跳转到搜索页面）
      window.showAllResults = function(query) {
        window.location.href = `/search/?q=${encodeURIComponent(query)}`;
      }
      
      // 高亮匹配文本
      function highlightText(text, indices) {
        if (!indices || indices.length === 0) return text;
        
        let result = '';
        let lastIndex = 0;
        
        indices.forEach(([start, end]) => {
          result += text.slice(lastIndex, start);
          result += `<mark class="bg-yellow-200 dark:bg-yellow-600 px-1 rounded">${text.slice(start, end + 1)}</mark>`;
          lastIndex = end + 1;
        });
        
        result += text.slice(lastIndex);
        return result;
      }
      
      // 防抖函数
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
      
      console.log('Fuse.js loaded successfully');

    } catch (error) {
      console.error('Failed to load Fuse.js:', error);

      // 降级到简单的文本搜索
      function simpleSearch(query, data) {
        if (!query || query.length < 1) return [];

        const lowerQuery = query.toLowerCase();
        return data
          .filter(item =>
            item.title.toLowerCase().includes(lowerQuery) ||
            item.description.toLowerCase().includes(lowerQuery) ||
            item.tags.some(tag => tag.toLowerCase().includes(lowerQuery)) ||
            item.content.toLowerCase().includes(lowerQuery)
          )
          .map((item, index) => ({
            item,
            score: 0.5, // 固定分数
            matches: [] // 简单搜索不提供匹配信息
          }))
          .slice(0, 6);
      }

      // 重新定义搜索函数使用简单搜索
      window.performSearch = function(query, isMobile = false) {
        if (!query || query.length < 1) {
          hideSearchResults();
          return;
        }

        // 使用简单搜索
        const currentLangData = currentLang === 'zh' ? zhPosts : enPosts;
        let results = simpleSearch(query, currentLangData);

        // 如果当前语言结果不足，搜索全部
        if (results.length < 3) {
          const allResults = simpleSearch(query, searchData);
          const otherLangResults = allResults.filter(result =>
            result.item.lang !== currentLang &&
            !results.some(curr => curr.item.slug === result.item.slug)
          );
          results = [...results, ...otherLangResults].slice(0, 6);
        }

        displaySearchResults(results, query, isMobile);
      };

      // 绑定搜索输入框事件（降级版本）
      const searchInputs = document.querySelectorAll('#search-input, #mobile-search-input');
      searchInputs.forEach(input => {
        if (input) {
          input.addEventListener('input', function(e) {
            const query = e.target.value.trim();
            const isMobile = input.id === 'mobile-search-input';
            window.performSearch(query, isMobile);
          });

          input.addEventListener('focus', function(e) {
            const query = e.target.value.trim();
            const isMobile = input.id === 'mobile-search-input';
            if (query.length >= 1) {
              window.performSearch(query, isMobile);
            }
          });

          input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              e.preventDefault();
              const query = e.target.value.trim();
              if (query) {
                window.location.href = `/search/?q=${encodeURIComponent(query)}`;
              }
            }
          });
        }
      });

      // 其他事件监听器
      document.addEventListener('click', function(e) {
        const searchResults = document.getElementById('search-results');
        const mobileSearchResults = document.getElementById('mobile-search-results');
        const searchInputs = document.querySelectorAll('#search-input, #mobile-search-input');

        let clickedOnSearch = false;
        searchInputs.forEach(input => {
          if (input && (input.contains(e.target) || input === e.target)) {
            clickedOnSearch = true;
          }
        });

        const clickedOnResults = searchResults.contains(e.target) || mobileSearchResults.contains(e.target);

        if (!clickedOnSearch && !clickedOnResults) {
          hideSearchResults();
        }
      });

      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          hideSearchResults();
        }
      });
    }

    // 通用事件绑定（无论Fuse.js是否加载都执行）
    function bindSearchEvents() {
      const searchInputs = document.querySelectorAll('#search-input, #mobile-search-input');

      searchInputs.forEach(input => {
        if (input) {
          console.log('Binding events to:', input.id);

          // 输入事件
          input.addEventListener('input', function(e) {
            const query = e.target.value.trim();
            const isMobile = input.id === 'mobile-search-input';

            console.log('Search input:', query);

            if (query.length >= 1) {
              // 使用全局搜索函数
              if (globalPerformSearch) {
                globalPerformSearch(query, isMobile);
              } else {
                console.log('Search function not ready');
              }
            } else {
              hideSearchResults();
            }
          });

          // 获得焦点时显示结果（如果有查询）
          input.addEventListener('focus', function(e) {
            const query = e.target.value.trim();
            const isMobile = input.id === 'mobile-search-input';

            if (query.length >= 1 && globalPerformSearch) {
              globalPerformSearch(query, isMobile);
            }
          });

          // 回车键搜索
          input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              e.preventDefault();
              const query = e.target.value.trim();
              if (query) {
                window.location.href = `/search/?q=${encodeURIComponent(query)}`;
              }
            }
          });
        }
      });

      // 点击外部隐藏搜索结果
      document.addEventListener('click', function(e) {
        const searchResults = document.getElementById('search-results');
        const mobileSearchResults = document.getElementById('mobile-search-results');
        const searchInputs = document.querySelectorAll('#search-input, #mobile-search-input');

        let clickedOnSearch = false;
        searchInputs.forEach(input => {
          if (input && (input.contains(e.target) || input === e.target)) {
            clickedOnSearch = true;
          }
        });

        const clickedOnResults = (searchResults && searchResults.contains(e.target)) ||
                                 (mobileSearchResults && mobileSearchResults.contains(e.target));

        if (!clickedOnSearch && !clickedOnResults) {
          hideSearchResults();
        }
      });

      // ESC 键隐藏搜索结果
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          hideSearchResults();
        }
      });
    }

    // 立即绑定事件
    bindSearchEvents();
  });
</script>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
