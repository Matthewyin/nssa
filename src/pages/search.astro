---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { getLangFromUrl } from '../utils/i18n';

// 获取当前语言
const currentLang = getLangFromUrl(Astro.url);

// 获取所有文章
const allPosts = await getCollection('posts', ({ data }) => {
  return !data.draft;
});

// 准备搜索数据
const searchData = allPosts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  description: post.data.description || '',
  tags: post.data.tags || [],
  categories: post.data.categories || [],
  content: post.body.slice(0, 500),
  date: post.data.date.toISOString(),
  lang: post.data.lang || 'zh',
  author: post.data.author || 'NSSA Team'
}));

// 获取查询参数
const query = Astro.url.searchParams.get('q') || '';

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat(currentLang === 'zh' ? 'zh-CN' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
};
---

<Layout 
  title={currentLang === 'zh' ? `搜索结果: ${query}` : `Search Results: ${query}`}
  description={currentLang === 'zh' ? `搜索"${query}"的结果` : `Search results for "${query}"`}
  lang={currentLang}
>
  <main class="max-w-6xl mx-auto px-6 py-8">
    <!-- 搜索头部 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        {currentLang === 'zh' ? '搜索结果' : 'Search Results'}
      </h1>
      
      <!-- 搜索框 -->
      <div class="relative max-w-2xl">
        <input
          type="text"
          id="search-page-input"
          placeholder={currentLang === 'zh' ? '搜索文章...' : 'Search articles...'}
          value={query}
          class="w-full px-4 py-3 pl-12 pr-4 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-apple-blue focus:border-transparent"
        />
        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5A7 7 0 113 10a7 7 0 0114 0z"/>
        </svg>
      </div>
    </div>

    <!-- 搜索结果容器 -->
    <div id="search-results-container">
      {query ? (
        <div class="text-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-apple-blue mx-auto mb-4"></div>
          <p class="text-gray-500 dark:text-gray-400">
            {currentLang === 'zh' ? '正在搜索...' : 'Searching...'}
          </p>
        </div>
      ) : (
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5A7 7 0 113 10a7 7 0 0114 0z"/>
          </svg>
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            {currentLang === 'zh' ? '开始搜索' : 'Start Searching'}
          </h2>
          <p class="text-gray-500 dark:text-gray-400">
            {currentLang === 'zh' ? '在上方输入关键词来搜索文章' : 'Enter keywords above to search articles'}
          </p>
        </div>
      )}
    </div>
  </main>
</Layout>

<script define:vars={{ searchData, currentLang, query }}>
  // 简单搜索功能
  function simpleSearch(query, data) {
    if (!query || query.length < 1) return [];
    
    const lowerQuery = query.toLowerCase();
    return data
      .filter(item => 
        item.title.toLowerCase().includes(lowerQuery) ||
        item.description.toLowerCase().includes(lowerQuery) ||
        item.tags.some(tag => tag.toLowerCase().includes(lowerQuery)) ||
        item.content.toLowerCase().includes(lowerQuery)
      )
      .map((item, index) => ({
        item,
        score: 0.8,
        matches: []
      }));
  }
  
  // 显示搜索结果
  function displaySearchResults(results, query) {
    const container = document.getElementById('search-results-container');
    if (!container) return;
    
    if (results.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5A7 7 0 113 10a7 7 0 0114 0z"/>
          </svg>
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            ${currentLang === 'zh' ? '没有找到结果' : 'No Results Found'}
          </h2>
          <p class="text-gray-500 dark:text-gray-400">
            ${currentLang === 'zh' ? `没有找到包含"${query}"的文章` : `No articles found containing "${query}"`}
          </p>
          <p class="text-gray-400 dark:text-gray-500 text-sm mt-2">
            ${currentLang === 'zh' ? '尝试使用不同的关键词或检查拼写' : 'Try different keywords or check spelling'}
          </p>
        </div>
      `;
    } else {
      const resultsHTML = results.map((result, index) => {
        const post = result.item;
        const postUrl = post.lang === 'en' ? `/en/posts/${post.slug}/` : `/posts/${post.slug}/`;
        const formattedDate = new Intl.DateTimeFormat(currentLang === 'zh' ? 'zh-CN' : 'en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        }).format(new Date(post.date));
        
        return `
          <article class="content-card p-6 mb-6">
            <div class="flex items-start justify-between mb-3">
              <div class="flex items-center gap-2">
                ${post.categories.map(cat => `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                    ${cat}
                  </span>
                `).join('')}
                ${post.lang !== currentLang ? `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-100 dark:bg-amber-900 text-amber-800 dark:text-amber-200">
                    ${post.lang === 'en' ? 'English' : '中文'}
                  </span>
                ` : ''}
              </div>
              <time class="text-sm text-gray-500 dark:text-gray-400">${formattedDate}</time>
            </div>
            
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">
              <a href="${postUrl}" class="hover:text-apple-blue transition-colors">
                ${post.title}
              </a>
            </h2>
            
            ${post.description ? `
              <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                ${post.description}
              </p>
            ` : ''}
            
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
                <span>${post.author}</span>
              </div>
              
              <a href="${postUrl}" class="inline-flex items-center text-apple-blue hover:text-blue-700 dark:hover:text-blue-300 transition-colors">
                ${currentLang === 'zh' ? '阅读更多' : 'Read More'}
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              </a>
            </div>
          </article>
        `;
      }).join('');
      
      container.innerHTML = `
        <div class="mb-6">
          <p class="text-gray-600 dark:text-gray-300">
            ${currentLang === 'zh' ? `找到 ${results.length} 个结果` : `Found ${results.length} results`}
            ${query ? (currentLang === 'zh' ? ` 包含 "${query}"` : ` for "${query}"`) : ''}
          </p>
        </div>
        <div class="space-y-6">
          ${resultsHTML}
        </div>
      `;
    }
  }
  
  // 执行搜索
  function performSearch(searchQuery) {
    if (!searchQuery) {
      const container = document.getElementById('search-results-container');
      if (container) {
        container.innerHTML = `
          <div class="text-center py-12">
            <svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5A7 7 0 113 10a7 7 0 0114 0z"/>
            </svg>
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              ${currentLang === 'zh' ? '开始搜索' : 'Start Searching'}
            </h2>
            <p class="text-gray-500 dark:text-gray-400">
              ${currentLang === 'zh' ? '在上方输入关键词来搜索文章' : 'Enter keywords above to search articles'}
            </p>
          </div>
        `;
      }
      return;
    }
    
    // 优先搜索当前语言的内容
    const currentLangData = searchData.filter(post => post.lang === currentLang);
    let results = simpleSearch(searchQuery, currentLangData);
    
    // 如果当前语言结果不足，搜索全部
    if (results.length < 5) {
      const allResults = simpleSearch(searchQuery, searchData);
      const otherLangResults = allResults.filter(result => 
        result.item.lang !== currentLang && 
        !results.some(curr => curr.item.slug === result.item.slug)
      );
      results = [...results, ...otherLangResults];
    }
    
    displaySearchResults(results, searchQuery);
  }
  
  // 页面加载时执行搜索
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-page-input');
    
    // 如果有查询参数，立即执行搜索
    if (query) {
      performSearch(query);
    }
    
    // 绑定搜索输入事件
    if (searchInput) {
      searchInput.addEventListener('input', function(e) {
        const searchQuery = e.target.value.trim();
        
        // 更新URL
        const url = new URL(window.location);
        if (searchQuery) {
          url.searchParams.set('q', searchQuery);
        } else {
          url.searchParams.delete('q');
        }
        window.history.replaceState({}, '', url);
        
        // 执行搜索
        performSearch(searchQuery);
      });
      
      searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          const searchQuery = e.target.value.trim();
          if (searchQuery) {
            performSearch(searchQuery);
          }
        }
      });
    }
  });
</script>
